name: Deploy to Azure Web App

on:
  workflow_dispatch:
  # Push trigger comentado para evitar deploy automático no primeiro commit
  # Descomente as linhas abaixo se quiser deploy automático em futuros pushes:
  # push:
  #   branches:
  #     - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Build and Prepare Application
        run: |
          # Build Frontend
          cd frontend
          npm install --legacy-peer-deps
          npm install styled-components zustand --save --legacy-peer-deps
          npm run build || npx vite build
          
          # Build Backend  
          cd ../backend
          npm install
          npm run build || npx tsc
          
          # Create public folder for static files
          mkdir -p public
          cp -r ../frontend/dist/* public/
          
          # Create server startup file for Azure
          cat > server.js << 'SERVERJS'
          const express = require('express');
          const path = require('path');
          const cors = require('cors');
          
          // Import the compiled app
          let app;
          try {
            app = require('./dist/app').default || require('./dist/app');
          } catch (e) {
            console.error('Could not load app from dist, creating new express app');
            app = express();
            app.use(cors());
            app.use(express.json());
            
            // Health check
            app.get('/health', (req, res) => {
              res.json({ status: 'UP', timestamp: new Date().toISOString() });
            });
            
            // API routes
            try {
              const apiRouter = require('./dist/routes').default || require('./dist/routes');
              app.use('/api', apiRouter);
            } catch (e) {
              console.log('API routes not found, skipping');
            }
          }
          
          // Serve static files
          app.use(express.static(path.join(__dirname, 'public')));
          
          // Catch-all for SPA
          app.get('*', (req, res) => {
            if (!req.path.startsWith('/api')) {
              res.sendFile(path.join(__dirname, 'public', 'index.html'));
            } else {
              res.status(404).json({ error: 'Not Found' });
            }
          });
          
          const PORT = process.env.PORT || 8080;
          app.listen(PORT, () => {
            console.log('Server is running on port ' + PORT);
          });
          SERVERJS
          
          # Update package.json
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json'));p.scripts.start='node server.js';p.main='server.js';fs.writeFileSync('package.json',JSON.stringify(p,null,2));"

      - name: Create Azure configuration files
        run: |
          cd backend
          
          # Create web.config for IIS/Azure
          cat > web.config << 'WEBCONFIG'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="^server.js/debug[/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <security>
                <requestFiltering>
                  <hiddenSegments>
                    <remove segment="bin"/>
                  </hiddenSegments>
                </requestFiltering>
              </security>
              <httpErrors existingResponse="PassThrough" />
              <iisnode node_env="production" 
                       nodeProcessCommandLine="&quot;%PROGRAMFILES%
odejs
ode.exe&quot;"
                       loggingEnabled="true"
                       logDirectory="iisnode"
                       debuggingEnabled="false"
                       maxLogFiles="10"
                       devErrorsEnabled="false" />
            </system.webServer>
          </configuration>
          WEBCONFIG
          
          # Create .deployment file for Azure
          cat > .deployment << 'DEPLOYMENT'
          [config]
          SCM_DO_BUILD_DURING_DEPLOYMENT=false
          DEPLOYMENT
          
          # Create iisnode.yml
          cat > iisnode.yml << 'IISNODE'
          node_env: production
          nodeProcessCommandLine: "C:Program Files
odejs
ode.exe"
          loggingEnabled: true
          logDirectory: iisnode
          debuggingEnabled: false
          maxLogFiles: 10
          devErrorsEnabled: false
          IISNODE
          
      - name: Zip artifact for deployment
        run: |
          cd backend
          # Include all files including hidden ones
          zip -r release.zip . -x "*.git*" -x "node_modules/*" -x "*.log"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: backend/release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Configure Azure App Settings'
        uses: azure/appservice-settings@v1
        with:
          app-name: 'expandev-04'
          app-settings-json: |
            [
              {
                "name": "WEBSITE_NODE_DEFAULT_VERSION",
                "value": "~20"
              },
              {
                "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                "value": "false"
              },
              {
                "name": "WEBSITE_RUN_FROM_PACKAGE",
                "value": "0"
              }
            ]
        continue-on-error: true
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'expandev-04'
          package: .
          startup-command: 'node server.js'